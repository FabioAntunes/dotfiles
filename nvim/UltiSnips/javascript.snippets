global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

snippet log "console log"
console.log(${VISUAL}$0)`!p snip.rv = semi(snip)`
endsnippet

snippet require "require"
const ${VISUAL}$0 = require('$0')`!p snip.rv = semi(snip)`
endsnippet

snippet imp "import"
import $1 from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet imp} "import {}"
import {$1} from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet imp* "import * as"
import * as $1 from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet exp "export"
export $1 from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet exp} "export {}"
export {$1} from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet exp}d "export { default as }"
export { default as $1} from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet exp* "export *"
export * from '$0'`!p snip.rv = semi(snip)`
endsnippet

snippet expd "export default"
export default $0`!p snip.rv = semi(snip)`
endsnippet

snippet describe "describe"
describe('$1', () => {
	$0
})`!p snip.rv = semi(snip)`
endsnippet

snippet it "it"
it('$1', () => {
	$0
})`!p snip.rv = semi(snip)`
endsnippet

snippet beforeEach "beforeEach"
beforeEach(() => {
	$0
})`!p snip.rv = semi(snip)`
endsnippet

snippet beforeAll "beforeAll"
beforeAll(() => {
	$0
})`!p snip.rv = semi(snip)`
endsnippet

snippet rc-functional "React functional component"
import React from 'react'`!p snip.rv = semi(snip)`
import PropTypes from 'prop-types'`!p snip.rv = semi(snip)`

const $1 = (${2:props}) => ($0)`!p snip.rv = semi(snip)`

export default $1`!p snip.rv = semi(snip)`
endsnippet

snippet rc-component "React component"
import React from 'react'`!p snip.rv = semi(snip)`
import PropTypes from 'prop-types'`!p snip.rv = semi(snip)`

class $1 extends React.Component {
	render() {$0}
}

$1.defaultProps = {}`!p snip.rv = semi(snip)`

$1.propTypes = {}`!p snip.rv = semi(snip)`

export default $1`!p snip.rv = semi(snip)`
endsnippet

snippet rc-styled "React styled-component"
import styled from 'styled-components';

const $1 = styled.$2\`
	$0
\`;

export default $1;
endsnippet

snippet rc-container "React redux container"
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import $1 from '$2';
import $6 from '$0';

const mapStateToProps = ({ $3 }) => ({
	$4
});

function mapDispatchToProps(dispatch) {
	return bindActionCreators({ $5 }, dispatch);
}

const $1Container = connect(mapStateToProps, mapDispatchToProps)(
	$1
);
export default $1Container;
endsnippet

snippet rc-willupdate "React componentWillUpdate"
componentWillUpdate(${1:nextProps}, ${2:nextState}) {
	$0
}
endsnippet

snippet rc-willreceive "React componentWillReceiveProps"
componentWillReceiveProps(${1:nextProps}) {
	$0
}
endsnippet

snippet rc-willunmount "React componentWillUnmount"
componentWillUnmount() {
	$0
}
endsnippet

snippet rc-shouldupdate "React shouldComponentUpdate"
shouldComponentUpdate(${1:nextProps}, ${2:nextState}) {
	$0
}
endsnippet

snippet rc-didupdate "React componentDidUpdate"
componentDidUpdate(${1:prevProps}, ${2:prevState}) {
	$0
}
endsnippet

snippet rc-didmount "React componentDidMount"
componentDidMount() {
	$0
}
endsnippet
